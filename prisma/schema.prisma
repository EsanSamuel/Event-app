// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  email          String      @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Reserve        Reserve[]
  Star           Star[]
  Pinn           Pinn[]
  Event          Event[]
  Organizer      Organizer[]
}

model Event {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  thumbnail   String?
  details     String
  location    String
  dateTime    String
  venueImages String[]
  capacity    Int
  category    EventCategory
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reserve     Reserve[]
  Guest       Guest[]
  Star        Star[]
  Organizers  Organizers[]
  Pinn        Pinn[]
  userId      String        @db.ObjectId

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Organizer Organizer[]
}

enum EventCategory {
  Music
  Art
  Theater
  Film
  Workshop
  Seminar
  Class
  Sports
  Fitness
  Adventure
  Tech
  Business
  Networking
  Charity
  Community
  Festival
  Religious
  Food
  Cooking
}

model Organizer {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @db.ObjectId
  userId  String @db.ObjectId

  user User          @relation(fields: [userId], references: [id])
  event Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  role  OrganizerRole
}

enum OrganizerRole {
  ADMIN
  MODERATOR
  CONTRIBUTOR
}

model Reserve {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId    String   @db.ObjectId
  userId     String   @db.ObjectId
  reservedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Guest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  eventId     String   @db.ObjectId
  AddedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Star {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  starredAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Organizers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  eventId     String   @db.ObjectId
  AddedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Pinn {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId  String   @db.ObjectId
  userId   String   @db.ObjectId
  pinnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
